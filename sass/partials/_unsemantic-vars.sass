// These mixins are intended to be used from:
//
//   * unsemantic-grid-base.sass
//   * unsemantic-grid-mobile.sass
//   * unsemantic-grid-desktop.sass
//   * _unsemantic-grid-responsive.sass
//   * etc.
//
// But could be used in your own styles, via class
// names of your choice. You don't *have* to be
// unsemantic. That's entirely up to you! :)

// If you don't need IE7 support, set a flag in the top-level scope.
//
//   $unsemantic-ie7-support: false
//
// If you do not declare that variable, the default setting is true.

@import "compass/css3"

// `Variables.
//----------------------------------------------------------------------------------------------------

$unsemantic-ie7-support: true !default

$container-max-width: 1200px !default

$gutter-half: 10px !default

$lang-forward: left !default

$lang-reverse: right !default

// `Creates scoped placeholders.
//----------------------------------------------------------------------------------------------------

=unsemantic-grid-placeholders($_SCOPE: null)
  $scope: ""

  // Scope: mobile, tablet, or desktop.
  @if $_SCOPE != null
    $scope: #{$_SCOPE + "-"}

  // ========================
  // `Clear floated elements.
  // ========================

  // http://sonspring.com/journal/clearing-floats

  %#{$scope}clear
    clear: both
    display: block
    overflow: hidden
    visibility: hidden
    width: 0
    height: 0

  // http://www.yuiblog.com/blog/2010/09/27/clearfix-reloaded-overflowhidden-demystified

  %#{$scope}clearfix:before,
  %#{$scope}clearfix:after
    content: "."
    display: block
    overflow: hidden
    visibility: hidden
    font-size: 0
    line-height: 0
    width: 0
    height: 0

  %#{$scope}clearfix:after
    clear: both

  @if $unsemantic-ie7-support
    %#{$scope}clearfix
      /* <IE7> */
      *zoom: 1
      /* </IE7> */

  // ===========
  // `Container.
  // ===========

  %#{$scope}grid-container
    @extend %#{$scope}clearfix
    margin-left: auto
    margin-right: auto

    @if $container-max-width != none
      max-width: $container-max-width

    // Set if gutter is non-zero.
    @if $gutter-half != 0
      padding-left: $gutter-half
      padding-right: $gutter-half

  // ==============
  // `Grid columns.
  // ==============

  %#{$scope}grid-columns-all
    +box-sizing(border-box)

    // Set if gutter is non-zero.
    @if $gutter-half != 0
      padding-left: $gutter-half
      padding-right: $gutter-half

      @if $unsemantic-ie7-support
        // [1] Remove padding, since IE7 doesn't
        //     support "box-sizing: border-box".

        /* <IE7> */
        *padding-left: 0
        *padding-right: 0
        /* </IE7> */

        //
        // [2] Fake what would normally be padding,
        //     for browsers that support box-sizing.
        & > *
          /* <IE7> */
          *margin-left: expression((!this.className.match(/grid-[1-9]/) && this.currentStyle.display === "block" && this.currentStyle.width === "auto") && "#{$gutter-half}")
          *margin-right: expression((!this.className.match(/grid-[1-9]/) && this.currentStyle.display === "block" && this.currentStyle.width === "auto") && "#{$gutter-half}")
          /* </IE7> */

  // ==============================================================
  // `Push & Pull, to rearrange column order (for potential "SEO").
  // ==============================================================

  // Remove padding, if it's being used
  // as a parent for other grid columns.
  %#{$scope}grid-parent
    padding-left: 0
    padding-right: 0

  // Allows columns to be offset +/- left.
  %#{$scope}grid-columns-push-pull
    position: relative

  // ===============================
  // `Hide on desktop/tablet/mobile.
  // ===============================

  %#{$scope}hide
    display: none !important

  // ==============
  // `Grid columns.
  // ==============

  //
  // For 5 through 95 percent.
  //

  @for $i from 1 through 19
    $num: $i * 5
    $decimal: $num / 100
    $percent: $num * 1%

    %#{$scope}grid-#{$num}
      float: $lang-forward
      width: $percent

      @if $unsemantic-ie7-support
        /* <IE7> */
        *width: expression(Math.floor(#{$decimal} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")
        /* </IE7> */

    %#{$scope}prefix-#{$num}
      margin-#{$lang-forward}: $percent

    %#{$scope}suffix-#{$num}
      margin-#{$lang-reverse}: $percent

    %#{$scope}push-#{$num}
      #{$lang-forward}: $percent

      @if $unsemantic-ie7-support
        /* <IE7> */
        *#{$lang-forward}: expression(Math.floor(#{$decimal} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")
        /* </IE7> */

    %#{$scope}pull-#{$num}
      #{$lang-forward}: $percent * -1

      @if $unsemantic-ie7-support
        /* <IE7> */
        *#{$lang-forward}: expression(Math.floor(#{$decimal * -1} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")
        /* </IE7> */

  //
  // For one-third and two-thirds.
  //

  @for $i from 1 through 2
    $num: $i * 33
    $one-third: 1/3
    $decimal: $i * $one-third
    $percent: ($num + $decimal) * 1%

    // Percentage based widths.
    %#{$scope}grid-#{$num}
      float: $lang-forward
      width: $percent

      @if $unsemantic-ie7-support
        /* <IE7> */
        *width: expression(Math.floor(#{$decimal} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")
        /* </IE7> */

    // Prefix, to add extra columns before.
    %#{$scope}prefix-#{$num}
      margin-#{$lang-forward}: $percent

    // Suffix, to add extra columns after.
    %#{$scope}suffix-#{$num}
      margin-#{$lang-reverse}: $percent

    // Push & Pull, to rearrange column order (for potential "SEO").
    %#{$scope}push-#{$num}
      #{$lang-forward}: $percent

      @if $unsemantic-ie7-support
        /* <IE7> */
        *#{$lang-forward}: expression(Math.floor(#{$decimal} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")
        /* </IE7> */

    %#{$scope}pull-#{$num}
      #{$lang-forward}: $percent * -1

      @if $unsemantic-ie7-support
        /* <IE7> */
        *#{$lang-forward}: expression(Math.floor(#{$decimal * -1} * (this.parentNode.offsetWidth - parseFloat(this.parentNode.currentStyle.paddingLeft) - parseFloat(this.parentNode.currentStyle.paddingRight))) + "px")
        /* </IE7> */

  //
  // Full width, just line-break.
  //

  %#{$scope}grid-100
    @extend %#{$scope}clearfix
    clear: both
    width: 100%

// `Consume placeholders at global scope. For: mobile, destkop.
//----------------------------------------------------------------------------------------------------

=unsemantic-grid-base

  // ===========
  // `Container.
  // ===========

  .grid-container
    @extend %grid-container

  // ========================
  // `Clear floated elements.
  // ========================

  .clear
    @extend %clear

  .clearfix
    @extend %clearfix

  // ==============
  // `Grid columns.
  // ==============

  //
  // For 5 through 100 percent.
  //

  @for $i from 1 through 20
    $num: $i * 5

    .grid-#{$num}
      @extend %grid-columns-all

    .mobile-grid-#{$num}
      @extend %grid-columns-all

  //
  // For one-third and two-thirds.
  //

  @for $i from 1 through 2
    $num: $i * 33

    .grid-#{$num}
      @extend %grid-columns-all

    .mobile-grid-#{$num}
      @extend %grid-columns-all

  // Remove padding, if it's being used
  // as a parent for other grid columns.

  .grid-parent
    @extend %grid-parent

// `Consume placeholders at global scope. For: mobile, tablet, destkop.
//----------------------------------------------------------------------------------------------------

=unsemantic-grid-base-tablet

  // ===========
  // `Container.
  // ===========

  .grid-container
    @extend %grid-container

  // ========================
  // `Clear floated elements.
  // ========================

  .clear
    @extend %clear

  .clearfix
    @extend %clearfix

  // ==============
  // `Grid columns.
  // ==============

  //
  // For 5 through 100 percent.
  //

  @for $i from 1 through 20
    $num: $i * 5

    .grid-#{$num}
      @extend %grid-columns-all

    .mobile-grid-#{$num}
      @extend %grid-columns-all

    .tablet-grid-#{$num}
      @extend %grid-columns-all

  //
  // For one-third and two-thirds.
  //

  @for $i from 1 through 2
    $num: $i * 33

    .grid-#{$num}
      @extend %grid-columns-all

    .mobile-grid-#{$num}
      @extend %grid-columns-all

    .tablet-grid-#{$num}
      @extend %grid-columns-all

  // Remove padding, if it's being used
  // as a parent for other grid columns.

  .grid-parent
    @extend %grid-parent

// `Consume placeholders at breakpoint scope.
//----------------------------------------------------------------------------------------------------

=unsemantic-grid-scoped($_SCOPE: null)
  $scope: ""
  $class: ""

  // Scope: mobile, tablet, or desktop.
  @if $_SCOPE != null
    $scope: #{$_SCOPE + "-"}

  // Class prefix.
  @if $_SCOPE != null and $_SCOPE != desktop
    $class: #{$_SCOPE + "-"}

  // ================
  // `Hide on mobile.
  // ================

  .hide-on-#{$_SCOPE}
    @extend %#{$scope}hide

  // ==============
  // `Grid columns.
  // ==============

  //
  // Full width, just line-break.
  //

  .#{$class}grid-100
    @extend %#{$scope}grid-100

  //
  // For 5 through 95 percent.
  //

  @for $i from 1 through 19
    $num: $i * 5

    // Percentage based widths.
    .#{$class}grid-#{$num}
      @extend %#{$scope}grid-#{$num}

    // Prefix, to add extra columns before.
    .#{$class}prefix-#{$num}
      @extend %#{$scope}prefix-#{$num}

    // Suffix, to add extra columns after.
    .#{$class}suffix-#{$num}
      @extend %#{$scope}suffix-#{$num}

    // Push, to rearrange column order (for potential "SEO").
    .#{$class}push-#{$num}
      @extend %#{$scope}push-#{$num}

    // Pull, to rearrange column order (for potential "SEO").
    .#{$class}pull-#{$num}
      @extend %#{$scope}pull-#{$num}

  //
  // For one-third and two-thirds.
  //

  @for $i from 1 through 2
    $num: $i * 33

    // Percentage based widths.
    .#{$class}grid-#{$num}
      @extend %#{$scope}grid-#{$num}

    // Prefix, to add extra columns before.
    .#{$class}prefix-#{$num}
      @extend %#{$scope}prefix-#{$num}

    // Suffix, to add extra columns after.
    .#{$class}suffix-#{$num}
      @extend %#{$scope}suffix-#{$num}

    // Push, to rearrange column order (for potential "SEO").
    .#{$class}push-#{$num}
      @extend %#{$scope}push-#{$num}

    // Pull, to rearrange column order (for potential "SEO").
    .#{$class}pull-#{$num}
      @extend %#{$scope}pull-#{$num}

  // ==============================================================
  // `Push & Pull, to rearrange column order (for potential "SEO").
  // ==============================================================

  //
  // For 5 through 95 percent.
  //

  @for $i from 1 through 19
    $num: $i * 5

    .#{$class}push-#{$num},
    .#{$class}pull-#{$num}
      @extend %#{$scope}grid-columns-push-pull

  //
  // For one-third and two-thirds.
  //

  @for $i from 1 through 2
    $num: $i * 33

    .#{$class}push-#{$num},
    .#{$class}pull-#{$num}
      @extend %#{$scope}grid-columns-push-pull